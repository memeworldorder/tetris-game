#!/bin/bash

# 🚀 GameFi Platform Production Deployment Script
# Deploys all 12 microservices to Railway.app with Supabase database

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="gamefi-platform"
SERVICES=(
    "api-gateway"
    "gaming-hub"
    "user-service"
    "game-engine"
    "rewards-service"
    "payment-service"
    "analytics-service"
    "telegram-bot"
    "twitter-bot"
    "social-hub"
    "scheduler"
    "admin-dashboard"
)

# Function to print colored output
print_header() {
    echo -e "\n${PURPLE}🚀 ================================${NC}"
    echo -e "${PURPLE}🚀 $1${NC}"
    echo -e "${PURPLE}🚀 ================================${NC}\n"
}

print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_action() {
    echo -e "${CYAN}🚀 $1${NC}"
}

# Check prerequisites
check_prerequisites() {
    print_header "Checking Prerequisites"
    
    # Check if Railway CLI is installed
    if ! command -v railway &> /dev/null; then
        print_info "Installing Railway CLI..."
        npm install -g @railway/cli
        print_status "Railway CLI installed"
    else
        print_status "Railway CLI is already installed"
    fi
    
    # Check if user is logged in
    if ! railway whoami &> /dev/null; then
        print_warning "Please log in to Railway first:"
        echo "railway login"
        exit 1
    fi
    
    print_status "Prerequisites check passed"
}

# Set up environment variables
setup_environment() {
    print_header "Setting Up Environment Variables"
    
    # Check if .env file exists
    if [ ! -f ".env.production" ]; then
        print_warning "Creating .env.production file..."
        cat > .env.production << 'EOF'
# Database Configuration - ACTUAL SUPABASE CREDENTIALS
SUPABASE_PROJECT_ID=qtwmykpyhcvfavjgncty
SUPABASE_URL=https://qtwmykpyhcvfavjgncty.supabase.co
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF0d215a3B5aGN2ZmF2amduY3R5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEwNTU2MDcsImV4cCI6MjA2NjYzMTYwN30.lhpqOaxVxadQamtHT_vx3-JyoKyThV3uMGMLvOMHRyU
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF0d215a3B5aGN2ZmF2amduY3R5Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MTA1NTYwNywiZXhwIjoyMDY2NjMxNjA3fQ.L8sIHwA9HFHS8tLn1KNg8Ei8V-C0c8EsjK3i3frQtQo

# Database URL for microservices (using pooler for better performance)
DATABASE_URL=postgresql://postgres.qtwmykpyhcvfavjgncty:[PASSWORD]@aws-0-us-west-1.pooler.supabase.com:6543/postgres

# Security - ACTUAL JWT SECRET
JWT_SECRET=fwu/6tRriMFnAYMa2UH6HoKu2uMdCU8P8wScHcX3Us0kFbOl0pfQ0vjPUM34XRyRu82LZ0dVCmAiXUJjlVpC2A==

# Solana Configuration
SOLANA_RPC_URL=https://api.mainnet-beta.solana.com
SOLANA_NETWORK=mainnet-beta

# Infrastructure URLs (will be set after infrastructure deployment)
REDIS_URL=redis://redis.railway.internal:6379
RABBITMQ_URL=amqp://gamefi:gamefi_queue@rabbitmq.railway.internal:5672
CLICKHOUSE_URL=http://clickhouse.railway.internal:8123

# Service URLs (will be auto-generated by Railway)
API_GATEWAY_URL=https://api-gateway-production.railway.app
GAMING_HUB_URL=https://gaming-hub-production.railway.app
USER_SERVICE_URL=https://user-service-production.railway.app

# Game Configuration
FREE_LIFE_LIMIT=5
PAID_LIFE_CAP=10
BONUS_DIVISOR=50000
BONUS_CAP=40
CHEAP_LIFE_PRICE_USD=0.03
MID_LIFE_PRICE_USD=0.09
HIGH_LIFE_PRICE_USD=0.27

# Social Media (Optional - set your own)
TELEGRAM_BOT_TOKEN=your-telegram-bot-token
TWITTER_API_KEY=your-twitter-api-key
TWITTER_API_SECRET=your-twitter-api-secret
EOF
        print_status ".env.production file created"
        print_warning "Please update the environment variables in .env.production with your actual values"
        print_info "Press Enter to continue after updating the file, or Ctrl+C to exit"
        read -r
    fi
    
    print_status "Environment configuration ready"
}

# Create Railway project
create_project() {
    print_header "Creating Railway Project"
    
    # Check if project already exists
    if railway status &> /dev/null; then
        print_warning "Railway project already exists in this directory"
        print_info "Current project: $(railway status --json | jq -r '.project.name')"
    else
        print_info "Initializing new Railway project..."
        railway init --name "$PROJECT_NAME"
        print_status "Railway project '$PROJECT_NAME' created"
    fi
}

# Deploy infrastructure services
deploy_infrastructure() {
    print_header "Deploying Infrastructure Services"
    
    # Deploy Redis
    print_info "Deploying Redis..."
    railway add redis
    
    # Deploy RabbitMQ
    print_info "Deploying RabbitMQ..."
    railway add rabbitmq
    
    # Deploy ClickHouse (optional)
    print_info "Deploying ClickHouse..."
    railway add clickhouse
    
    print_status "Infrastructure services deployed"
}

# Deploy microservices
deploy_services() {
    print_header "Deploying Microservices"
    
    # Load environment variables
    if [ -f ".env.production" ]; then
        export $(cat .env.production | grep -v '^#' | xargs)
    fi
    
    # Deploy each service
    for service in "${SERVICES[@]}"; do
        print_info "Deploying $service..."
        
        if [ -d "services/$service" ]; then
            cd "services/$service"
            
            # Create service if it doesn't exist
            railway add --name "$service" || true
            
            # Set service-specific environment variables
            railway variables set NODE_ENV=production
            railway variables set DATABASE_URL="$DATABASE_URL"
            railway variables set REDIS_URL="$REDIS_URL"
            railway variables set RABBITMQ_URL="$RABBITMQ_URL"
            railway variables set JWT_SECRET="$JWT_SECRET"
            railway variables set SOLANA_RPC_URL="$SOLANA_RPC_URL"
            
            # Deploy the service
            railway up --service "$service"
            
            cd "../.."
            print_status "$service deployed successfully"
        else
            print_error "Service directory services/$service not found"
        fi
    done
    
    print_status "All microservices deployed"
}

# Test deployment
test_deployment() {
    print_header "Testing Deployment"
    
    # Wait for services to be ready
    print_info "Waiting for services to be ready..."
    sleep 30
    
    # Test health endpoints
    print_info "Testing service health endpoints..."
    
    # Get service URLs
    api_gateway_url=$(railway domain --service api-gateway 2>/dev/null || echo "https://api-gateway-production.railway.app")
    gaming_hub_url=$(railway domain --service gaming-hub 2>/dev/null || echo "https://gaming-hub-production.railway.app")
    
    # Test API Gateway
    if curl -f "$api_gateway_url/health" &> /dev/null; then
        print_status "API Gateway is healthy"
    else
        print_warning "API Gateway health check failed"
    fi
    
    # Test Gaming Hub
    if curl -f "$gaming_hub_url/health" &> /dev/null; then
        print_status "Gaming Hub is healthy"
    else
        print_warning "Gaming Hub health check failed"
    fi
    
    print_status "Deployment testing completed"
}

# Show deployment results
show_results() {
    print_header "Deployment Complete! 🎉"
    
    echo -e "${GREEN}✅ All services deployed successfully!${NC}"
    echo ""
    echo -e "${BLUE}🌐 Your GameFi Platform URLs:${NC}"
    
    # Try to get actual URLs from Railway
    for service in "${SERVICES[@]}"; do
        url=$(railway domain --service "$service" 2>/dev/null || echo "https://$service-production.railway.app")
        echo -e "   • $service: ${YELLOW}$url${NC}"
    done
    
    echo ""
    echo -e "${BLUE}📊 Infrastructure Services:${NC}"
    echo -e "   • Database: ${YELLOW}Supabase (managed)${NC}"
    echo -e "   • Redis: ${YELLOW}Railway Redis${NC}"
    echo -e "   • RabbitMQ: ${YELLOW}Railway RabbitMQ${NC}"
    echo -e "   • ClickHouse: ${YELLOW}Railway ClickHouse${NC}"
    
    echo ""
    echo -e "${BLUE}🔧 Management Commands:${NC}"
    echo -e "   • View logs: ${YELLOW}railway logs --service [service-name]${NC}"
    echo -e "   • Check status: ${YELLOW}railway status${NC}"
    echo -e "   • Scale service: ${YELLOW}railway scale --service [service-name] --replicas [count]${NC}"
    
    echo ""
    echo -e "${GREEN}🚀 Your GameFi platform is now live and ready for players!${NC}"
}

# Main execution
main() {
    print_header "GameFi Platform Production Deployment"
    
    check_prerequisites
    setup_environment
    create_project
    deploy_infrastructure
    deploy_services
    test_deployment
    show_results
    
    print_status "Deployment completed successfully! 🎉"
}

# Handle Ctrl+C gracefully
trap 'print_error "\nDeployment interrupted. You can resume by running this script again."; exit 1' INT

# Run main function
main "$@" 